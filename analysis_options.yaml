# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml


analyzer:
  strong-mode:
    implicit-casts: false  # Disallow implicit casting
    implicit-dynamic: false  # Disallow implicit dynamic types
  errors:
    todo: error
    unused_import: error
    unused_local_variable: error
    dead_code: error
    missing_return: error

linter:
  rules:
    always_declare_return_types: true
    always_put_control_body_on_new_line: true
    always_require_non_null_named_parameters: true
    always_specify_types: true
    avoid_print: true
    avoid_empty_else: true
    avoid_escaping_inner_quotes: true
    avoid_function_literals_in_foreach_calls: true
    avoid_init_to_null: true
    avoid_redundant_argument_values: true
    avoid_return_types_on_setters: true
    avoid_shadowing_type_parameters: true
    await_only_futures: true
    camel_case_types: true
    cascade_invocations: true
    constant_identifier_names: true
    control_flow_in_finally: true
    curly_braces_in_flow_control_structures: true
    empty_catches: true
    empty_constructor_bodies: true
    empty_statements: true
    file_names: true
    hash_and_equals: true
    implementation_imports: true
    join_return_with_assignment: true
    leading_newlines_in_multiline_strings: true
    library_names: true
    library_prefixes: true
    lines_longer_than_80_chars: true
    no_default_cases: true
    no_duplicate_case_values: true
    non_constant_identifier_names: true
    null_closures: true
    omit_local_variable_types: false # For explicitness
    only_throw_errors: true
    overridden_fields: true
    package_api_docs: true
    package_prefixed_library_names: true
    parameter_assignments: true
    prefer_asserts_in_initializer_lists: true
    prefer_const_constructors: true
    prefer_const_constructors_in_immutables: true
    prefer_const_declarations: true
    prefer_const_literals_to_create_immutables: true
    prefer_final_fields: true
    prefer_final_locals: true
    prefer_for_elements_to_map_fromIterable: true
    prefer_function_declarations_over_variables: true
    prefer_generic_function_type_aliases: true
    prefer_if_elements_to_conditional_expressions: true
    prefer_inlined_adds: true
    prefer_interpolation_to_compose_strings: true
    prefer_is_empty: true
    prefer_is_not_empty: true
    prefer_single_quotes: true
    prefer_spread_collections: true
    require_trailing_commas: true
    sized_box_for_whitespace: true
    sort_child_properties_last: true
    sort_constructors_first: true
    sort_unnamed_constructors_first: true
    type_annotate_public_apis: true
    unnecessary_await_in_return: true
    unnecessary_brace_in_string_interps: true
    unnecessary_const: true
    unnecessary_constructor_name: true
    unnecessary_lambdas: true
    unnecessary_new: true
    unnecessary_null_aware_assignments: true
    unnecessary_null_in_if_null_operators: true
    unnecessary_parenthesis: true
    unnecessary_raw_strings: true
    unnecessary_this: true
    use_full_hex_values_for_flutter_colors: true
    use_key_in_widget_constructors: true
    use_late_for_private_fields_and_variables: true
    use_rethrow_when_possible: true
    use_string_buffers: true
    use_to_and_as_if_applicable: true
    valid_regexps: true

  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/lints.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
